/* Author = Youngsu Choi */

/* Task 1 - Constraints */

/* Constraint query output formatting */
SET LINE 110;
SET TIMING ON;

COLUMN OWNER FORMAT a20;
COLUMN CONSTRAINT_NAME FORMAT a20;
COLUMN TABLE_NAME FORMAT a20;
COLUMN SEARCH_CONDITION FORMAT a20;
COLUMN INDEX_NAME FORMAT a20;

/* EMP constraints */
SELECT OWNER, CONSTRAINT_NAME, TABLE_NAME, SEARCH_CONDITION,
INDEX_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'EMP';

/* DEPT constraints */
SELECT OWNER, CONSTRAINT_NAME, TABLE_NAME, SEARCH_CONDITION,
INDEX_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'DEPT';

/* PURCHASE constraints */
SELECT OWNER, CONSTRAINT_NAME, TABLE_NAME, SEARCH_CONDITION,
INDEX_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'PURCHASE';

/* CLIENT constraints */
SELECT OWNER, CONSTRAINT_NAME, TABLE_NAME, SEARCH_CONDITION,
INDEX_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'CLIENT';

/* Creating EMP constraints */
ALTER TABLE EMP ADD CONSTRAINT CK_ENAME
CHECK (ENAME IS NOT NULL);

ALTER TABLE EMP ADD CONSTRAINT FK_DEPTNO FOREIGN KEY (DEPTNO)
REFERENCES DEPT (DEPTNO);

/* Creating DEPT constraints */
ALTER TABLE DEPT ADD CONSTRAINT UN_DNAME UNIQUE (DNAME);
ALTER TABLE DEPT ADD CONSTRAINT CK_DNAME 
CHECK (DNAME IS NOT NULL);


/* Creating PURCHASE constraints */
ALTER TABLE PURCHASE ADD CONSTRAINT CK_RECEIPTNO
CHECK (RECEIPTNO IS NOT NULL);
ALTER TABLE PURCHASE ADD CONSTRAINT CK_AMOUNT
CHECK(AMOUNT IS NOT NULL);
ALTER TABLE PURCHASE ADD CONSTRAINT CK_SERVICETYPE 
CHECK (SERVICETYPE IN ('Training', 'Data Recovery', 'Consultation',
'Software Installation', 'Software Repair'));
ALTER TABLE PURCHASE ADD CONSTRAINT CK_PAYMENTTYPE
CHECK (PAYMENTTYPE IN ('Debit', 'Cash', 'Credit'));
ALTER TABLE PURCHASE ADD CONSTRAINT CK_GST CHECK (GST IN ('Yes', 'No'));
ALTER TABLE PURCHASE ADD CONSTRAINT FK_EMPNO FOREIGN KEY (SERVEDBY) 
REFERENCES EMP (EMPNO);
ALTER TABLE PURCHASE ADD CONSTRAINT FK_CLIENTNO FOREIGN KEY (CLIENTNO) 
REFERENCES CLIENT (CLIENTNO);
 
 /* Creating CLIENT constraints */
ALTER TABLE CLIENT ADD CONSTRAINT CK_CNAME
CHECK(CNAME IS NOT NULL);
 
 /* Task 2 - Triggers */
 /*2.1*/
SELECT C.CLIENTNO, CNAME, SUM(AMOUNT)
FROM CLIENT C, PURCHASE P
WHERE C.CLIENTNO = P.CLIENTNO
GROUP BY C.CLIENTNO, CNAME 
HAVING SUM(AMOUNT) >= ALL(
	SELECT SUM(AMOUNT)
	FROM CLIENT C, PURCHASE P
	WHERE C.CLIENTNO = P.CLIENTNO
	GROUP BY C.CLIENTNO, CNAME);
	
/*2.2*/
CREATE OR REPLACE TRIGGER TOP_DISCOUNT 
	BEFORE INSERT ON "PURCHASE"
	FOR EACH ROW
BEGIN
	IF (:NEW.CLIENTNO = 24535)
	THEN :NEW.AMOUNT := 0.85*:NEW.AMOUNT;
	END IF;
END;
/

/*2.3*/
CREATE OR REPLACE TRIGGER SUNSHINE_DEPT
	BEFORE INSERT ON PURCHASE
	FOR EACH ROW
DECLARE
	vEMPNO EMP.EMPNO%TYPE;
BEGIN
	SELECT EMPNO INTO vEMPNO FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME = 'SALES - Sunshine');
	
	IF (:NEW.SERVEDBY IN (vEMPNO))
	THEN :NEW.PAYMENTTYPE := 'Cash';
	END IF;
	
	IF (:NEW.SERVICETYPE = 'Data Recovery' AND :NEW.SERVEDBY IN (vEMPNO))
	THEN :NEW.AMOUNT := 0.70*:NEW.AMOUNT;
	END IF;
END;
/

/* Task 3 - Views*/
/*3.1*/
CREATE VIEW V_DEPT_AMOUNT AS 
SELECT D.DEPTNO, D.DNAME, MAX(AMOUNT) MAXA, MIN(AMOUNT) MINA, AVG(AMOUNT) AVGA, SUM(AMOUNT) SUMA
FROM DEPT D, PURCHASE P, EMP E
WHERE P.SERVEDBY = E.EMPNO AND D.DEPTNO = E.DEPTNO
GROUP BY D.DEPTNO, D.DNAME;

SELECT * FROM V_DEPT_AMOUNT;

/*3.2*/
CREATE MATERIALIZED VIEW MV_DEPT_AMOUNT BUILD IMMEDIATE AS 
SELECT D.DEPTNO, D.DNAME, MAX(AMOUNT) MAXA, MIN(AMOUNT) MINA, AVG(AMOUNT) AVGA, SUM(AMOUNT) SUMA
FROM DEPT D, PURCHASE P, EMP E
WHERE P.SERVEDBY = E.EMPNO AND D.DEPTNO = E.DEPTNO
GROUP BY D.DEPTNO, D.DNAME;

SELECT * FROM MV_DEPT_AMOUNT;
 
/*3.3*/
SELECT * FROM V_DEPT_AMOUNT;
SELECT * FROM MV_DEPT_AMOUNT;

EXPLAIN PLAN FOR SELECT * FROM V_DEPT_AMOUNT;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

EXPLAIN PLAN FOR SELECT * FROM MV_DEPT_AMOUNT;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
 
/*3.4*/
CREATE VIEW V_DEPT_EMP_AMOUNT AS
SELECT D.DEPTNO, EMPNO, COUNT(*) CA, AVG(AMOUNT) AVGA, MAX(AMOUNT) MAXA, SUM(AMOUNT) SUMA
FROM DEPT D, EMP E, PURCHASE P
WHERE D.DEPTNO = E.DEPTNO AND P.SERVEDBY = E.EMPNO
GROUP BY D.DEPTNO, EMPNO
ORDER BY D.DEPTNO ASC, SUMA DESC;

CREATE MATERIALIZED VIEW MV_DEPT_EMP_AMOUNT BUILD IMMEDIATE AS
SELECT D.DEPTNO, EMPNO, COUNT(*) CA, AVG(AMOUNT) AVGA, MAX(AMOUNT) MAXA, SUM(AMOUNT) SUMA
FROM DEPT D, EMP E, PURCHASE P
WHERE D.DEPTNO = E.DEPTNO AND P.SERVEDBY = E.EMPNO
GROUP BY D.DEPTNO, EMPNO
ORDER BY D.DEPTNO ASC, SUMA DESC;

/*3.5*/
SELECT * FROM V_DEPT_EMP_AMOUNT;
SELECT * FROM MV_DEPT_EMP_AMOUNT;

EXPLAIN PLAN FOR SELECT * FROM V_DEPT_EMP_AMOUNT;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

EXPLAIN PLAN FOR SELECT * FROM MV_DEPT_EMP_AMOUNT;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/* Task 4 - Indexes */
/*4.1*/
SELECT COUNT(*)
FROM PURCHASE
WHERE SUBSTR(RECEIPTNO, 0, 3) IN (
	  SELECT SUBSTR(RECEIPTNO, 0, 3)
	  FROM PURCHASE
	  GROUP BY SUBSTR(RECEIPTNO, 0, 3)
	  HAVING COUNT(*) >= 10);


/*4.2*/
EXPLAIN PLAN FOR SELECT COUNT(*)
				 FROM PURCHASE
				 WHERE SUBSTR(RECEIPTNO, 0, 3) IN (
					SELECT SUBSTR(RECEIPTNO, 0, 3)
					FROM PURCHASE
					GROUP BY SUBSTR(RECEIPTNO, 0, 3)
					HAVING COUNT(*) >= 10);
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/*Function-Based Index*/
CREATE INDEX BOOK_INDEX ON PURCHASE SUBSTR(RECEIPTNO, 0, 3);

/*4.3*/
SELECT SUM(AMOUNT) FROM PURCHASE P
WHERE SERVEDBY IN (
	SELECT EMPNO FROM EMP
	WHERE DEPTNO = 50)
AND INSTR(SERVICETYPE, 'Software') = 0;

/*4.4*/
EXPLAIN PLAN FOR SELECT SUM(AMOUNT)
FROM EMP E, PURCHASE P
WHERE P.SERVEDBY = E.EMPNO AND E.DEPTNO = 50
AND INSTR(SERVICETYPE, 'Software') = 0;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

CREATE INDEX SERVICE_INDEX ON PURCHASE(INSTR(SERVICETYPE, 'Software'));
 
/*4.5*/
SELECT COUNT(*)
FROM PURCHASE
WHERE SERVICETYPE IN (
	SELECT SERVICETYPE
	FROM PURCHASE
	GROUP BY SERVICETYPE, PAYMENTTYPE, GST
	HAVING COUNT (*) >= 1000) AND PAYMENTTYPE IN (
		SELECT PAYMENTTYPE
		FROM PURCHASE
		GROUP BY SERVICETYPE, PAYMENTTYPE, GST
		HAVING COUNT (*) >= 1000) AND GST IN (
			SELECT GST
			FROM PURCHASE
			GROUP BY SERVICETYPE, PAYMENTTYPE, GST
			HAVING COUNT(*) >= 1000);	

/*5.1*/
SELECT * FROM PURCHASE WHERE PURCHASENO = 1234;

EXPLAIN PLAN FOR SELECT * FROM PURCHASE WHERE PURCHASENO = 1234;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/*5.2*/
ALTER TABLE PURCHASE
DROP CONSTRAINT PK_PURCHASENO;

EXPLAIN PLAN FOR SELECT * FROM PURCHASE WHERE PURCHASENO = 1234;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);






























 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 